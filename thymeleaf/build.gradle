//스프링 MVC 2편 - 백엔드 웹 개발 활용 기술 - 5
// 1. 타임리프 - 기본 기능
// => 프로젝트 생성, 타임리프 소개,
// => 텍스트(text,utext), 변수(SpringEL), 기본 객체들, 유틸리티 객체와 날짜, URL 링크, 리터럴, 연산, 속성 값 설정, 반복 , 조건부 평가 , 주석 , 블록, 자바스크립트 인라인
// => 템플릿 조각, 템플릿 레이아웃1, 템플릿 레이아웃2

//프로젝트 생성
//사전 준비물 : Java 11 설치 , IDE: IntelliJ 또는 Eclipse 설치
//스프링 부트 스타터 사이트로 이동해서 스프링 프로젝트 생성 : https://start.spring.io
//프로젝트 선택 : Project: Gradle >>  Groovy Project Language: Java >> Spring Boot: 2.5.x >> Project Metadata - Group: hello , Artifact: thymeleaf-basic >> Name: thymeleaf-basic >> Package name: hello.thymeleaf >> Packaging: Jar >> Java: 11 >> Dependencies: Spring Web, Lombok , Thymeleaf
//주의 - 스프링 부트 3.0을 선택하게 되면 다음 부분 꼭 확인 - https://bit.ly/springboot3 참고
// => Java 17 이상 사용, javax 패키지 이름을 jakarta로 변경해야함
// => 오라클과 자바 라이센스 문제로 모든 javax 패키지를 jakarta로 변경하기로 했음
// => 패키지 이름 변경의 예) javax.persistence.Entity->jakarta.persistence.Entity(JPA 애노테이션) ,  javax.annotation.PostConstruct -> jakarta.annotation.PostConstruct(@PostConstruct 애노테이션), javax.validation -> jakarta.validation(검증 애노테이션)

//동작 확인
// => 기본 메인 클래스 실행( ThymeleafBasicApplication.main() )
// => http://localhost:8080 호출해서 Whitelabel Error Page가 나오면 정상 동작

//IntelliJ : Gradle 대신에 자바가 직접 실행하도록 설정
//최근 IntelliJ 버전은 Gradle을 통해서 실행 하는 것이 기본 설정이다. 이렇게 하면 실행속도가 느리다. 다음과 같이 변경하면 자바로 바로 실행해서 실행속도가 더 빠르다
//Preferences >>Build, Execution, Deployment >> Build Tools >> Gradle >> [Build and run using: Gradle 에서 IntelliJ IDEA로] & [Run tests using: Gradle 에서 IntelliJ IDEA로]

//롬복 적용
//1. Preferences >> plugin >> lombok 검색 실행 (재시작)
//2. Preferences >> Annotation Processors 검색 >> Enable annotation processing 체크 (재시작)
// 3. 임의의 테스트 클래스를 만들고 @Getter, @Setter 확인

// Postman 다운 및 설치: https://www.postman.com/downloads
//Hello 서블릿 부터 시작! - hello.servlet.ServletApplication.java로 이동

//타임리프 소개
// => 공식 사이트: https://www.thymeleaf.org/
// => 공식 메뉴얼 - 기본 기능: https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html
// => 공식 메뉴얼 - 스프링 통합: https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html
// => 이전 강의인 스프링 MVC 1편에서 타임리프를 간단히 사용해보고, 그 특징들도 알아보았다.
// => 이번 시간에는 타임리프의 개념은 간단히 소개하고, 실제 동작하는 기본 기능 위주로 알아보겠다.

//타임리프 특징
// => 1. 서버 사이드 HTML 렌더링 (SSR)
// => 타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링 하는 용도로 사용된다.
// => 2. 네츄럴 템플릿
// => 타임리프는 순수 HTML을 최대한 유지하는 특징이 있다.
// => 타임리프로 작성한 파일은 HTML을 유지하기 때문에 웹 브라우저에서 파일을 직접 열어도 내용을 확인할 수 있고, 서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수 있다.
// => JSP를 포함한 다른 뷰 템플릿들은 해당 파일을 열면, 예를 들어서 JSP 파일 자체를 그대로 웹 브라우저에서 열어보면 JSP 소스코드와 HTML이 뒤죽박죽 섞여서 웹 브라우저에서 정상적인 HTML 결과를 확인할 수 없다.
// => 오직 서버를 통해서 JSP가 렌더링 되고 HTML 응답 결과를 받아야 화면을 확인할 수 있다. 반면에 타임리프로 작성된 파일은 해당 파일을 그대로 웹 브라우저에서 열어도 정상적인 HTML 결과를 확인할 수 있다.
// => 물론 이 경우 동적으로 결과가 렌더링 되지는 않는다. 하지만 HTML 마크업 결과가 어떻게 되는지 파일만 열어도 바로 확인할 수 있다.
// => 이렇게 순수 HTML을 그대로 유지하면서 뷰 템플릿도 사용할 수 있는 타임리프의 특징을 네츄럴 템플릿 (natural templates)이라 한다.
// => 3. 스프링 통합 지원
// => 타임리프는 스프링과 자연스럽게 통합되고, 스프링의 다양한 기능을 편리하게 사용할 수 있게 지원한다. 이 부분은 스프링 통합과 폼 장에서 자세히 알아보겠다.

//타임리프 기본 기능
// => 참고: https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax
//타임리프 사용하기 위한 선언문 : <html xmlns:th="http://www.thymeleaf.org">
//기본 표현식 : 타임리프는 다음과 같은 기본 표현식들을 제공
// => 간단한 표현: 변수 표현식: ${...} , 선택 변수 표현식: *{...} , 메시지 표현식: #{...} , 링크 URL 표현식: @{...} , 조각 표현식: ~{...}
// => 리터럴 : 텍스트('one text', 'Another one!',...) 숫자(0, 34, 3.0, 12.3,...), 불린(true, false), 널(null), 리터럴 토큰(one, sometext, main,...)
// => 문자 연산 : 문자합치기:+ , 리터럴 대체: |The name is ${name}|
// => 산술 연산 : Binary operators: +, -, *, /, % , Minus sign (unary operator): -
// => 불린 연산 : Binary operators: and, or , Boolean negation (unary operator): !, not
// => 비교 연산 : >,<,>=,<=(gt,lt,ge,le)
// => 동등 연산 : ==, != (eq, ne)
// => 조건 연산: If-then: (if) ? (then) , If-then-else: (if) ? (then) : (else) , Default: (value) ?: (defaultvalue)
// => 특별한 토큰: No-Operation: _

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.10'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
