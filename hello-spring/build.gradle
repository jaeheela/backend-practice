// 1. 프로젝트 환경설정
// => 프로젝트 생성 , 라이브러리 살펴보기 , View 환경설정 , 빌드하고 실행하기
// 2. 스프링 웹 개발 기초
// => 정적 컨텐츠 , MVC와 템플릿 엔진 , API
// 3. 회원 관리 예제 - 백엔드 개발
// => 비즈니스 요구사항 정리 , 회원 도메인과 리포지토리 만들기 , 회원 리포지토리 테스트 케이스 작성 , 회원 서비스 개발 , 회원 서비스 테스트
// 4. 스프링 빈과 의존관계
// => 컴포넌트 스캔과 자동 의존관계 설정하기 , 자바 코드로 직접 스프링 빈 등록하기
// 5. 회원 관리 예제 - 웹 MVC 개발
// => 회원 웹 기능 - 홈 화면 추가,등록,조러회
// 6. 스프링 DB 접근 기술
// => H2 데이터베이스 설치, 순수 Jdbc, 스프링 통합 테스트, 스프링 JdbcTemplate, JPA, 스프링 데이터 JPA
// 7. AOP
// => AOP가 필요한 상황 , AOP 적용

//프로젝트 생성
// => 사전 준비물 : Java 11 설치 , IDE: IntelliJ 또는 Eclipse 설치
// => 주의! 가급적 JDK 11 버전을 설치해주세요. 다른 버전을 설치하면 정상 동작하지 않을 가능성이 높습니다.
// => 스프링 부트 스타터 사이트로 이동해서 스프링 프로젝트 생성 : https://start.spring.io
// => 프로젝트 선택 : Project: Gradle - Groovy Project >> Spring Boot: 2.3.x >> Language: Java >> Packaging: Jar >> Java: 11 >>  Project Metadata - groupId: hello , artifactId: hello-spring >> Dependencies: Spring Web, Thymeleaf >> generate 클릭해 다운

//주의 - 스프링 부트 3.0을 선택하게 되면 다음 부분 꼭 확인 - https://bit.ly/springboot3 참고
// => Java 17 이상 사용, javax 패키지 이름을 jakarta로 변경해야함
// => 오라클과 자바 라이센스 문제로 모든 javax 패키지를 jakarta로 변경하기로 했음
// => 패키지 이름 변경의 예) javax.persistence.Entity->jakarta.persistence.Entity(JPA 애노테이션) ,  javax.annotation.PostConstruct -> jakarta.annotation.PostConstruct(@PostConstruct 애노테이션), javax.validation -> jakarta.validation(검증 애노테이션)
// => H2 데이터베이스를 2.1.214 버전 이상 사용

// 참고
// => 지금은 영상을 찍던 시점의 2.3.1 버전이 선택지에 없습니다.
// => Spring Boot 버전은 SNAPSHOT, M1 같은 미정식 버전을 제외하고 최신 버전을 사용하시면 됩니다.
// => 예) 2.7.1 (SNAPSHOT) 이것은 아직 정식 버전이 아니므로 선택하면 안됩니다.
// => 예) 2.7.0 이렇게 뒤에 영어가 붙어있지 않으면 정식 버전이므로 이 중에 최신 버전을 선택하면 됩니다.

//동작 확인
// => 기본 메인 클래스 실행( HelloSpringApplication.main() )
// => http://localhost:8080 호출해서 Whitelabel Error Page가 나오면 정상 동작

//IntelliJ : Gradle 대신에 자바가 직접 실행하도록 설정
//최근 IntelliJ 버전은 Gradle을 통해서 실행 하는 것이 기본 설정이다. 이렇게 하면 실행속도가 느리다. 다음과 같이 변경하면 자바로 바로 실행해서 실행속도가 더 빠르다
//Preferences >> Build, Execution, Deployment >> Build Tools >> Gradle >> [Build and run using: Gradle 에서 IntelliJ IDEA로] & [Run tests using: Gradle 에서 IntelliJ IDEA로]

//IntelliJ에서 단축키를 확실하게 검색하는 방법
//File Settings >> keymap >> 검색창에 단축키 이름을 입력 >> 단축키 이름 확인 >> ex) Refactor This의 윈도우 단축키 >> Ctrl + Alt + Shift + T

//IntelliJ JDK 설치 확인 - 가급적 JDK 11 버전을 설치
// => 다른 버전을 설치하면 정상 동작하지 않을 가능성이 높음
// => IntelliJ에서 자바 실행이 잘 안되면 [프로젝트 JDK 설정] , [gradle JDK 설정] 확인 - 일반적으로 자동으로 설정이 되어 있지만, 가끔 문제가 되는 경우에 참고
// => [프로젝트 JDK 설정] : Mac: File Project Structure (⌘;) >> JDK: 내가 새로 설치한 자바 11로 지정
// => [gradle JDK 설정] : Mac: IntelliJ IDEA | Preferences(⌘,) >>  Build and run using : IntelliJ IDEA로 선택
// => [gradle JDK 설정] : Mac: IntelliJ IDEA | Preferences(⌘,) >>  Build tests using : IntelliJ IDEA로 선택
// => [gradle JDK 설정] : Mac: IntelliJ IDEA | Preferences(⌘,) >>  Gradle JVM : 내가 새로 설치한 자바 11로 지정

//라이브러리 살펴보기 - Gradle은 의존관계가 있는 라이브러리를 함께 다운로드 함
// => 스프링 부트 라이브러리
// => [spring-boot-starter-web]
// => spring-boot-starter-tomcat: 톰캣 (웹서버)
// => spring-webmvc: 스프링 웹 MVC
// => spring-boot-starter-thymeleaf: 타임리프 템플릿 엔진(View)
// => spring-boot-starter(공통): 스프링 부트 + 스프링 코어 + 로깅 - spring-boot, spring-core ,spring-boot-starter-logging(logback, slf4j)
// => 테스트 라이브러리
// => [spring-boot-starter-test]
// => junit: 테스트 프레임워크
// => mockito: 목 라이브러리
// => assertj: 테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리
// => spring-test: 스프링 통합 테스트 지원

//View 환경설정 후 빌드하고 실행하기
// 1. Welcome Page 설정
// => resources/static/index.html
// => 스프링 부트가 제공하는 Welcome Page 기능
// => 스프링 부트는 정적 컨텐츠 기능을 자동으로 제공해줌 - static/index.html 을 올려두면 Welcome page 기능을 제공함 : https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-welcome-page
// 2. thymeleaf 템플릿 엔진
// => 장점) html을 사용하므로 서버 엔진 없이 열어도 내용을 볼 수 있음
// => 작동법) 컨트롤러에서 리턴 값으로 문자를 반환하면 뷰 리졸버(viewResolver)가 화면을 찾아서 처리함
// => 스프링 부트 템플릿엔진의 기본 viewName 매핑) [resources:templates] / +{ViewName}+ [.html]
// => @GetMapping("hello")
//    public String hello(Model model) { model.addAttribute("data", "hello!!"); return "hello"; }
// => resources/templates/hello.html
// => thymeleaf 공식 사이트: https://www.thymeleaf.org/
// => 스프링 공식 템플릿 엔진 튜토리얼: https://spring.io/guides/gs/serving-web-content/
// => 스프링부트 템플릿 엔진 메뉴얼: https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-template-engines
// => thymeleaf 템플릿엔진 동작 확인 - [실행] : http://localhost:8080/hello
// => 참고로 spring-boot-devtools 라이브러리를 추가하면, html 파일을 컴파일만 해주면 서버 재시작 없이 View 파일 변경 가능함
// => settings 메뉴 >> Build,Execution,deployment >> Compiler >> Build project automatically 옵션 활성화
// => 인텔리J 컴파일 방법: 메뉴 build >> Recompile
//3. 빌드하고 실행하기 - 콘솔로 이동
// => [폴더 목록 확인 ls] >> [./gradlew build] >> [cd build/libs] >> java -jar hello-spring-0.0.1-SNAPSHOT.jar] >> 콘솔에서 실행확인


plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
	runtimeOnly('org.springframework.boot:spring-boot-devtools')

	// jdbc 관련 라이브러리 추가
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	// h2 데이터베이스  관련 라이브러리 추가
	runtimeOnly 'com.h2database:h2'

}

tasks.named('test') {
	useJUnitPlatform()
}
