//스프링 MVC 2편 - 백엔드 웹 개발 활용 기술 - 5
// 2. 타임리프 - 스프링 통합과 폼
// => 프로젝트 설정, 타임리프 스프링 통합
// => 입력 폼 처리
// => 요구사항 추가
// => 체크 박스 - 단일1, 멀티 / 라디오 버튼 / 셀렉트 박스

//프로젝트 설정
// => 스프링 MVC 1편에서 마지막에 완성했던 상품 관리 프로젝트를 떠올려보자.
// => 지금부터 이 프로젝트에 스프링이 지원하는 다양한 기능을 붙여가면서 스프링 MVC를 깊이있게 학습해보자.
// => MVC1 편에서 개발한 상품 관리 프로젝트를 약간 다듬어서 form-start 라는 프로젝트에 넣어두었다.

//프로젝트 설정 순서
// => form-start 의 폴더 이름을 form로 변경 >> 프로젝트 임포트 >> File Open >> 해당 프로젝트의 build.gradle >> Open as Project
// => ItemServiceApplication.main()을 실행해서 프로젝트가 정상 수행되는지 확인
// => 실행 : http://localhost:8080
// => 실행 : http://localhost:8080/form/items

//타임리프 스프링 통합
// => 타임리프는 크게 2가지 메뉴얼을 제공한다.
// => 기본 메뉴얼: https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html
// => 스프링 통합 메뉴얼: https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html
// => 타임리프는 스프링 없이도 동작하지만, 스프링과 통합을 위한 다양한 기능을 편리하게 제공한다.
// => 그리고 이런 부분은 스프링으로 백엔드를 개발하는 개발자 입장에서 타임리프를 선택하는 하나의 이유가 된다.

//스프링 통합으로 추가되는 기능들
// => 스프링의 SpringEL 문법 통합
// => ${@myBean.doSomething()} 처럼 스프링 빈 호출 지원
// => 편리한 폼 관리를 위한 추가 속성 : th:object(기능 강화, 폼 커맨드 객체 선택) , th:field , th:errors , th:errorclass
// => 폼 컴포넌트 기능 : checkbox, radio button, List 등을 편리하게 사용할 수 있는 기능 지원
// => 스프링의 메시지, 국제화 기능의 편리한 통합
// => 스프링의 검증, 오류 처리 통합
// => 스프링의 변환 서비스 통합(ConversionService)

//설정 방법
// => 타임리프 템플릿 엔진을 스프링 빈에 등록하고, 타임리프용 뷰 리졸버를 스프링 빈으로 등록하는 방법
// => https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#the-springstandard-dialect
// => https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html#views-and-view-resolvers
// => 스프링 부트는 이런 부분을 모두 자동화 해준다.
// => build.gradle 에 [implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'] 한줄민 넣어주면
// => Gradle은 타임리프와 관련된 라이브러리를 다운로드 받고, 스프링 부트는 앞서 설명한 타임리프와 관련된 설정용 스프링 빈을 자동으로 등록해준다.
// => 타임리프 관련 설정을 변경하고 싶으면 다음을 참고해서 application.properties 에 추가하면 된다.
// => 스프링 부트가 제공하는 타임리프 설정, thymeleaf 검색 필요
// => https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html#common-application-properties-templating
plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}
