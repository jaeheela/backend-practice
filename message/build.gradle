//스프링 MVC 2편 - 백엔드 웹 개발 활용 기술 - 5
// 3. 메시지, 국제화
// => 프로젝트 설정
// => 메시지, 국제화 소개
// => 스프링 메시지 소스 설정, 스프링 메시지 소스 사용
// => 웹 애플리케이션에 메시지 적용하기
// => 웹 애플리케이션에 국제화 적용하기

//프로젝트 설정
// => 이전 프로젝트에 이어서 메시지, 국제화 기능을 학습해보자. 스프링 통합과 폼에서 개발한 상품 관리 프로젝트를 일부 수정해서 message-start 라는 프로젝트에 넣어두었다.
// => 참고로 메시지, 국제화 예제에 집중하기 위해서 복잡한 체크, 셀렉트 박스 관리 기능은 제거했다.

//프로젝트 설정 순서
// => message-start 의 폴더 이름을 message로 변경 >> 프로젝트 임포트 >> File Open >> 해당 프로젝트의 build.gradle >> Open as Project
// => ItemServiceApplication.main()을 실행해서 프로젝트가 정상 수행되는지 확인
// => 실행 : http://localhost:8080
// => 실행 : http://localhost:8080/message/items

//메시지, 국제화 소개
//메시지
// => 악덕? 기획자가 화면에 보이는 문구가 마음에 들지 않는다고, 상품명이라는 단어를 모두 상품이름으로 고쳐달라고 하면 어떻게 해야할까?
// => 여러 화면에 보이는 상품명, 가격, 수량 등, label 에 있는 단어를 변경하려면 다음 화면들을 다 찾아가면서 모두 변경해야 한다.
// => 지금처럼 화면 수가 적으면 문제가 되지 않지만 화면이 수십개 이상이라면 수십개의 파일을 모두 고쳐야 한다. : addForm.html , editForm.html , item.html , items.html
// => 왜냐하면 해당 HTML 파일에 메시지가 하드코딩 되어 있기 때문이다. 이런 다양한 메시지를 한 곳에서 관리하도록 하는 기능을 메시지 기능이라 한다
// => 예) 메시지 관리용 파일 : messages.properties >> item=상품 , item.id=상품 ID , item.itemName=상품명 , item.price=가격 , item.quantity=수량
// => 각 HTML들은 다음과 같이 해당 데이터를 key 값으로 불러서 사용하는 것이다.
// => addForm.html : <label for="itemName" th:text="#{item.itemName}"></label>
// => editForm.html : <label for="itemName" th:text="#{item.itemName}"></label>
//국제화
// => 메시지에서 한 발 더 나가보자. 메시지에서 설명한 메시지 파일( messages.properties )을 각 나라별로 별도로 관리하면 서비스를 국제화 할 수 있다.
// => 예를 들어서 다음과 같이 2개의 파일을 만들어서 분류한다.
// => 예) 메시지 관리용 국제화 파일 : messages_en.properties >> item=Item , item.id=Item ID , item.itemName=Item Name , item.price=price , item.quantity=quantity
// => 예) 메시지 관리용 국제화 파일 : messages_ko.properties >> item=상품 , item.id=상품 ID , item.itemName=상품명 , item.price=가격 , item.quantity=수량
// => 영어를 사용하는 사람이면 messages_en.properties 를 사용하고, 한국어를 사용하는 사람이면 messages_ko.properties 를 사용하게 개발하면 된다.
// => 이렇게 하면 사이트를 국제화 할 수 있다. 한국에서 접근한 것인지 영어에서 접근한 것인지는 인식하는 방법은 HTTP accept-language 해더 값을 사용하거나 사용자가 직접 언어를 선택하도록 하고, 쿠키 등을 사용해서 처리하면 된다.
// => 메시지와 국제화 기능을 직접 구현할 수도 있겠지만, 스프링은 기본적인 메시지와 국제화 기능을 모두 제공한다.
// => 그리고 타임리프도 스프링이 제공하는 메시지와 국제화 기능을 편리하게 통합해서 제공한다. 지금부터 스프링이 제공하는 메시지와 국제화 기능을 알아보자.

//스프링 메시지 소스 설정 방법 2가지
// => 스프링은 기본적인 메시지 관리 기능을 제공한다.
// => 메시지 관리 기능을 사용하려면 스프링이 제공하는 MessageSource 를 스프링 빈으로 등록하면 되는데, MessageSource 는 인터페이스이다.
// => 따라서 구현체인 ResourceBundleMessageSource 를 스프링 빈으로 등록하면 된다.
//방법1. 개발자가 직접 등록 - ItemServiceApplication.java에 예시로 있음
//방법2. 스프링 부트가 등록 - 스프링 부트를 사용하면 스프링 부트가 MessageSource 를 자동으로 스프링 빈으로 등록한다.

// 1. 스프링 부트 메시지 소스 설정
// => application.properties
// => 스프링 부트를 사용하면 다음과 같이 메시지 소스를 설정할 수 있다.
// => application.properties : spring.messages.basename=messages,config.i18n.messages
// => 스프링 부트 메시지 소스 기본 값 : spring.messages.basename=messages
// => MessageSource 를 스프링 빈으로 등록하지 않고, 스프링 부트와 관련된 별도의 설정을 하지 않으면 messages 라는 이름으로 기본 등록된다.
// => 따라서 messages_en.properties , messages_ko.properties , messages.properties 파일만 등록하면 자동으로 인식된다.
// 2. 메시지 파일 만들기
// => messages_ko.properties
// => messages_en.properties
// => 메시지 파일을 만들어보자. 국제화 테스트를 위해서 messages_en 파일도 추가하자.
// => 주의! 파일명은 massage가 아니라 messages다! 마지막 s에 주의하자
// => messages.properties : 기본 값으로 사용(한글)
// => messages_en.properties : 영어 국제화 사용
/// => resources/messages.properties : hello=안녕 hello.name=안녕 {0}
/// => resources/messages_en.properties : hello=hello hello.name=hello {0}
// 3. 스프링 메시지 소스 사용 및 테스트
// => test/java/hello/itemservice/message.MessageSourceTest.java
// => 스프링이 제공하는 메시지 소스를 어떻게 사용하는지 테스트 코드를 통해서 학습해보자.


plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}
