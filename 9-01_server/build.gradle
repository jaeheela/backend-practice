//톰캣 설치
// => 자바 17 버전 또는 그 이상을 설치하고 사용해주세요. 강의에서는 스프링 3.0을 사용하는데 자바 17이 최소 요구 버전
// => 톰캣 다운로드 : https://tomcat.apache.org/download-10.cgi
// => Download >> Apache Tomcat 10 버전의 톰캣 다운로드 Core에 있는 zip >> 다운로드 후 압축 풀기

//톰캣 실행
// => 콘솔창에서 톰캣폴더/bin 폴더로 이동 >> 권한부여: chmod 755 * (권한주지 않으면 permission denied 라는 오류 발생할 수 있음)  >> ./startup.sh

//톰캣 종료
// => ./shutdown.sh

//톰캣 실행 확인
// => http://localhost:8080

//톰캣 실행 로그 확인
// => 톰캣폴더/logs/catalina.out 파일
// => 톰캣을 실행했지만 http://localhost:8080 에 접근이 되지 않으면 우선 실행 로그 확인
// => 만약 [java.net.BindException: Address already in use] 메시지가 보인다면 어떤 프로그램이 이미 8080 포트를 사용하고 있는 것
// 해결법1 - 해당 포트를 사용하는 프로그램 종료
// => [MAC] sudo lsof -i :8080 (프로세스 ID(PID) 조회) >> sudo kill -9 PID (프로세스 종료)
// => [윈도우] netstat -ano | findstr (현재 포트를 사용중인 프로세스 조회) >> taskkill /f /pid 프로세스번호 (포트번호 프로세스 강제 종료)
// 해결법2 - 컴퓨터 재부팅
// 해결법3 - 톰캣 서버 포트 변경
// => 톰캣폴더/conf/server.xml >> 톰캣 설정 파일을 수정 >> 8080을 다른 포트로 변경 >> 톰캣 서버 종료 후 재시작 >> 다른 포트로 접근
// => <Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />
// => 예) 8090 포트로 변경했으면 http://localhost:8090 으로 접근

//프로젝트 설정
// => 사전 설정 : Java 17 이상 설치 , IDE: IntelliJ 또는 Eclipse 설치
// => 순서 :server 폴더 오픈 >> 프로젝트 임포트 >> File Open >> build.gradle >> Open as Project

plugins {
    id 'java'
    id 'war'
}

group = 'hello'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

//스프링 프레임워크
// => DI 컨테이너, MVC, DB 접근 기술 등 수 많은 기능을 제공하고 다양한 문제 해결 다양한 라이브러리들을 편리하게 사용할 수 있도록 통합
// => 개발자의 생산성이 높아짐, 사용범위 확대 , 자바 생태계의 사실상 표준
// => 스프링과 그 생태계가 점점 커짐 , 스프링의 기능도 점점 많아짐
// => 다양한 오픈 소스의 등장으로 수 많은 라이브러리를 함께 사용해야함 , 스프링으로 프로젝트를 시작할 때 필요한 설정이 점점 늘어남
// => 스프링으로 프로젝트를 시작하는 것이 점점 어려워짐 , 시작도 하기 전에 복잡한 설정 때문에 포기
// => 핵심 기술: 스프링 DI 컨테이너, AOP, 이벤트
// => 웹 기술: 스프링 MVC, 스프링 WebFlux
// => 데이터 접근 기술: 트랜잭션, JDBC, ORM 지원, XML 지원
// => 기술 통합: 캐시, 이메일, 원격접근, 스케줄링
// => 테스트: 스프링 기반 테스트 지원
//스프링 역사
// => 2003년 스프링 프레임워크 1.0 - XML
// => 2006년 스프링 프레임워크 2.0 - XML 편의 기능 지원
// => 2009년 스프링 프레임워크 3.0 - 자바 코드로 설정
// => 2013년 스프링 프레임워크 4.0 - 자바8
// => 2014년 스프링 부트 1.0
// => 2017년 스프링 프레임워크 5.0, 스프링 부트 2.0 - 리엑티브 프로그래밍 지원
// => 2022년 스프링 프레임워크 6.0, 스프링 부트 3.0 - 자바 17, Jakarta EE
//스프링 부트
// => BOOT, 부팅 : 최소한의 인간 개입으로 시작하고 완전히 작동하는 것을 의미
// => 어떤 일을 시작하기 위해 필요한 모든 준비를 마친다는 의미 시작을 위한 복잡한 설정 과정은 스프링 부트가 해결
// => 개발자는 새로운 스프링 애플리케이션을 쉽고 빠르게 시작
// => 스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용
// => 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
// => 관례에 의한 간결한 설정
//스프링 부트의 핵심 기능 5가지
// => WAS: Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
// => 라이브러리 관리 :손쉬운 빌드 구성을 위한 스타터 종속성 제공 , 스프링과 외부 라이브러리의 버전을 자동으로 관리
// => 자동 구성: 프로젝트 시작에 필요한 스프링과 외부 라이브러리의 빈을 자동 등록
// => 외부 설정: 환경에 따라 달라져야 하는 외부 설정 공통화
// => 프로덕션 준비: 모니터링을 위한 메트릭, 상태 확인 기능 제공
//스프링 부트를 배워야 하는 이유
// => 스프링 부트는 스프링 프레임워크를 쉽게 사용할 수 있게 도와주는 도구일 뿐 본질은 [스프링 프레임워크]
// => 하지만 스프링 부트가 제공하는 편의 기능이 너무 막강해서 스프링 부트 사용은 필수
// => 스프링 부트는 편리하지만, 너무 많은 것을 자동화
// => 최소한 스프링 부트가 어떤 원리로 작동하는지 알아두어야 함 그래야 문제가 발생했을 때 해결 가능
// => 스프링 부트의 원리를 이해하면 문제점을 쉽게 파악
// => 스프링 부트는 수 많은 편의 기능들을 제공
// => 대부분의 개발자가 비슷하게 고민하는 기능을 스프링 부트는 이미 만들어서 제공
// => 예를 들어서 외부 설정, 액츄에이터를 통한 모니터링 관리 기능
// => 개발 시간 단축
//스프링? 스프링이라는 단어는 문맥에 따라 다르게 사용된다.
//=> 스프링 DI 컨테이너 기술, 스프링 프레임워크, 스프링 부트, 스프링 프레임워크 등을 모두 포함한 스프링 생태계

dependencies {
    //서블릿
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    //스프링 MVC 추가
    //=> spring-webmvc 라이브러리를 추가하면 스프링 MVC 뿐만 아니라 spring-core 를 포함한 스프링 핵심 라이브러리들도 함께 포함된다.
    implementation 'org.springframework:spring-webmvc:6.0.4'
}

tasks.named('test') {
    useJUnitPlatform()
}

/*
//war 풀기, 인텔리J 무료버전 필요
task explodedWar(type: Copy) {
    into "$buildDir/exploded"
    with war
}
*/

//hello.servlet.TestServlet.java 부터 예제를 보자